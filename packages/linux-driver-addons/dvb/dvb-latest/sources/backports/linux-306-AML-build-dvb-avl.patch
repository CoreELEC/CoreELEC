--- a/drivers/media/dvb-avl/aml_dmx.c	2017-12-10 19:34:57.000000000 +0100
+++ b/drivers/media/dvb-avl/aml_dmx.c	2017-12-12 12:55:21.255063140 +0100
@@ -547,7 +547,7 @@
 	struct dvb_demux_feed *feed = dmx->channel[f->chan_id].feed;
 
 	if (feed && feed->cb.sec)
-		feed->cb.sec(p, sec_len, NULL, 0, f->filter, DMX_OK);
+		feed->cb.sec(p, sec_len, NULL, 0, f->filter, NULL);
 }
 
 static void hardware_match_section(struct aml_dmx *dmx,
@@ -968,7 +968,7 @@
 		if (dmx->channel[2].feed && dmx->channel[2].feed->cb.ts) {
 			dmx->channel[2].feed->cb.ts(buffer1_virt, len1,
 						buffer2_virt, len2,
-						&dmx->channel[2].feed->feed.ts, DMX_OK);
+						&dmx->channel[2].feed->feed.ts, NULL);
 		}
 	}
 	WRITE_MPEG_REG(PARSER_SUB_RP, rd_ptr);
@@ -1167,7 +1167,7 @@
 			channel->dvr_feed->cb.ts(
 					(u8 *)afifo->pages+afifo->buf_read*size,
 					cnt*size, NULL, 0,
-					&channel->dvr_feed->feed.ts, DMX_OK);
+					&channel->dvr_feed->feed.ts, NULL);
 		afifo->buf_read = 0;
 	}
 
@@ -1186,7 +1186,7 @@
 			channel->dvr_feed->cb.ts(
 					(u8 *)afifo->pages+afifo->buf_read*size,
 					cnt*size, NULL, 0,
-					&channel->dvr_feed->feed.ts, DMX_OK);
+					&channel->dvr_feed->feed.ts, NULL);
 		afifo->buf_read = afifo->buf_toggle;
 	}
 
--- a/drivers/media/amlogic/wetek/wetek_dmx.c	2017-12-10 19:34:57.000000000 +0100
+++ b/drivers/media/amlogic/wetek/wetek_dmx.c	2017-12-12 12:55:21.255063140 +0100
@@ -547,7 +547,7 @@
 	struct dvb_demux_feed *feed = dmx->channel[f->chan_id].feed;
 
 	if (feed && feed->cb.sec)
-		feed->cb.sec(p, sec_len, NULL, 0, f->filter, DMX_OK);
+		feed->cb.sec(p, sec_len, NULL, 0, f->filter, NULL);
 }
 
 static void hardware_match_section(struct aml_dmx *dmx,
@@ -968,7 +968,7 @@
 		if (dmx->channel[2].feed && dmx->channel[2].feed->cb.ts) {
 			dmx->channel[2].feed->cb.ts(buffer1_virt, len1,
 						buffer2_virt, len2,
-						&dmx->channel[2].feed->feed.ts, DMX_OK);
+						&dmx->channel[2].feed->feed.ts, NULL);
 		}
 	}
 	WRITE_MPEG_REG(PARSER_SUB_RP, rd_ptr);
@@ -1167,7 +1167,7 @@
 			channel->dvr_feed->cb.ts(
 					(u8 *)afifo->pages+afifo->buf_read*size,
 					cnt*size, NULL, 0,
-					&channel->dvr_feed->feed.ts, DMX_OK);
+					&channel->dvr_feed->feed.ts, NULL);
 		afifo->buf_read = 0;
 	}
 
@@ -1186,7 +1186,7 @@
 			channel->dvr_feed->cb.ts(
 					(u8 *)afifo->pages+afifo->buf_read*size,
 					cnt*size, NULL, 0,
-					&channel->dvr_feed->feed.ts, DMX_OK);
+					&channel->dvr_feed->feed.ts, NULL);
 		afifo->buf_read = afifo->buf_toggle;
 	}
 
diff --git a/drivers/media/dvb-avl/avl6862.c b/drivers/media/dvb-avl/avl6862.c
index 04cf26d..abcf573 100644
--- a/drivers/media/dvb-avl/avl6862.c
+++ b/drivers/media/dvb-avl/avl6862.c
@@ -1692,10 +1692,10 @@ static struct dvb_frontend_ops avl6862_ops = {
 	.delsys = {SYS_DVBT, SYS_DVBT2, SYS_DVBC_ANNEX_A, SYS_DVBC_ANNEX_B, SYS_DVBS, SYS_DVBS2},
 	.info = {
 		.name			= "Availink avl6862",
-		.frequency_min		= 950000,
-		.frequency_max		= 862000000,
-		.frequency_stepsize	= 0,
-		.frequency_tolerance	= 0,
+		.frequency_min_hz	= 175 * MHz,
+		.frequency_max_hz	= 2150 * MHz,
+		.frequency_stepsize_hz	= 0,
+		.frequency_tolerance_hz	= 0,
 		.symbol_rate_min	= 1000000,
 		.symbol_rate_max	= 45000000,
 		.caps = FE_CAN_FEC_1_2                 |
diff --git a/drivers/media/dvb-avl/r848a.c b/drivers/media/dvb-avl/r848a.c
index ccd6a1c..99e92f2 100644
--- a/drivers/media/dvb-avl/r848a.c
+++ b/drivers/media/dvb-avl/r848a.c
@@ -5281,12 +5281,12 @@ R848_ErrCode R848_SetXtalIntCap(struct r848_priv *priv, R848_Xtal_Cap_TYPE R848_
 
 //-------------------------------------------------------------------------------------------
 
-static int r848_release(struct dvb_frontend *fe)
+void r848_release(struct dvb_frontend *fe)
 {
 
 	kfree(fe->tuner_priv);
 	fe->tuner_priv = NULL;
-	return 0;
+	return;
 }
 
 static int r848_init(struct dvb_frontend *fe)
@@ -5572,9 +5572,9 @@ static const struct dvb_tuner_ops r848_tuner_ops = {
 	.info = {
 	.name           = "Rafael R848",
 
-//		.frequency_min  = 850000,
-//		.frequency_max  = 2300000,
-//		.frequency_step = 206,
+		.frequency_min_hz  = 175 * MHz,
+		.frequency_max_hz  = 2150 * MHz,
+		.frequency_step_hz = 200 * kHz,
 	},
 
 	.release = r848_release,
diff --git a/drivers/media/amlogic/wetek/ascot3.c b/drivers/media/amlogic/wetek/ascot3.c
index 0b424e8..91a2378 100644
--- a/drivers/media/amlogic/wetek/ascot3.c
+++ b/drivers/media/amlogic/wetek/ascot3.c
@@ -250,14 +250,14 @@ static int ascot3_init(struct dvb_frontend *fe)
 	return 0;
 }
 
-static int ascot3_release(struct dvb_frontend *fe)
+void ascot3_release(struct dvb_frontend *fe)
 {
 	struct ascot3_priv *priv = fe->tuner_priv;
 
 	dev_dbg(&priv->i2c->dev, "%s()\n", __func__);
 	kfree(fe->tuner_priv);
 	fe->tuner_priv = NULL;
-	return 0;
+	return;
 }
 
 static int ascot3_sleep(struct dvb_frontend *fe)
@@ -462,9 +462,9 @@ static int ascot3_get_frequency(struct dvb_frontend *fe, u32 *frequency)
 static struct dvb_tuner_ops ascot3_tuner_ops = {
 	.info = {
 		.name = "Sony ASCOT3",
-		.frequency_min = 1000000,
-		.frequency_max = 1200000000,
-		.frequency_step = 25000,
+		.frequency_min_hz = 1 * MHz,
+		.frequency_max_hz = 1200  * MHz,
+		.frequency_step_hz = 25 * kHz,
 	},
 	.init = ascot3_init,
 	.release = ascot3_release,
diff --git a/drivers/media/amlogic/wetek/avl6211.c b/drivers/media/amlogic/wetek/avl6211.c
index f57acbe..5c0dc4a 100644
--- a/drivers/media/amlogic/wetek/avl6211.c
+++ b/drivers/media/amlogic/wetek/avl6211.c
@@ -1445,10 +1445,10 @@ static int avl6211_read_ucblocks(struct dvb_frontend* fe, u32* ucblocks)
 	*ucblocks = 0;
 	return 0;
 }
-static int avl6211_get_frontend(struct dvb_frontend* fe)
+static int avl6211_get_frontend(struct dvb_frontend* fe, struct dtv_frontend_properties *p)
 {
 	struct avl6211_state *state = fe->demodulator_priv;
-	struct dtv_frontend_properties *p = &fe->dtv_property_cache;
+//	struct dtv_frontend_properties *p = &fe->dtv_property_cache;
 	u32 code_rate;
 	u16 ret;
 		
@@ -1908,10 +1908,10 @@ static struct dvb_frontend_ops avl6211_ops = {
 	.delsys = { SYS_DVBS, SYS_DVBS2 }, 
 	.info = {
 		.name = "Availink AVL6211+AV2011 DVB-S/S2",	
-		.frequency_min = 950000,
-		.frequency_max = 2150000,
-		.frequency_stepsize = 0,		
-		.frequency_tolerance = 0,
+		.frequency_min_hz = 950 * MHz,
+		.frequency_max_hz = 2150 * MHz,
+		.frequency_stepsize_hz = 0,		
+		.frequency_tolerance_hz = 0,
 		.symbol_rate_min = 800000,		/* Min = 800K */
 		.symbol_rate_max = 50000000,	/* Max = 50M */
 		.caps = FE_CAN_INVERSION_AUTO |
diff --git a/drivers/media/amlogic/wetek/cxd2837.c b/drivers/media/amlogic/wetek/cxd2837.c
index 44193a7..53e2a65 100644
--- a/drivers/media/amlogic/wetek/cxd2837.c
+++ b/drivers/media/amlogic/wetek/cxd2837.c
@@ -984,7 +984,7 @@ static int get_tune_settings(struct dvb_frontend *fe,
 			     struct dvb_frontend_tune_settings *s)
 {
 	s->min_delay_ms = 1500;
-	s->step_size = fe->ops.info.frequency_stepsize;
+	s->step_size = fe->ops.info.frequency_stepsize_hz;
 	
 	return 0;
 }
@@ -1678,7 +1678,7 @@ static int get_fe_c(struct cxd_state *state)
 	return 0;
 }
 
-static int get_frontend(struct dvb_frontend *fe)
+static int get_frontend(struct dvb_frontend *fe, struct dtv_frontend_properties *p)
 {
 	struct cxd_state *state = fe->demodulator_priv;
 
@@ -1705,8 +1705,8 @@ static int get_frontend(struct dvb_frontend *fe)
 	.delsys = { SYS_DVBC_ANNEX_A, SYS_DVBT, SYS_DVBT2 },
 	.info = {
 		.name = "CXD2837 DVB-C DVB-T/T2",
-		.frequency_min = 47000000,	/* DVB-T: 47125000 */
-		.frequency_max = 865000000,	/* DVB-C: 862000000 */
+		.frequency_min_hz =  47 * MHz,	/* DVB-T: 47125000 */
+		.frequency_max_hz = 865 * MHz,	/* DVB-C: 862000000 */
 		.caps = 	FE_CAN_FEC_1_2 |
 					FE_CAN_FEC_2_3 |
 					FE_CAN_FEC_3_4 |
diff --git a/drivers/media/amlogic/wetek/cxd2841er_wetek.c b/drivers/media/amlogic/wetek/cxd2841er_wetek.c
index 505accd..5b98ff1 100644
--- a/drivers/media/amlogic/wetek/cxd2841er_wetek.c
+++ b/drivers/media/amlogic/wetek/cxd2841er_wetek.c
@@ -3120,11 +3120,11 @@ static int cxd2841er_sleep_tc_to_active_c(struct cxd2841er_priv *priv,
 	return 0;
 }
 
-static int cxd2841er_get_frontend(struct dvb_frontend *fe)
+static int cxd2841er_get_frontend(struct dvb_frontend *fe, struct dtv_frontend_properties *p)
 {
 	enum fe_status status = 0;
 	struct cxd2841er_priv *priv = fe->demodulator_priv;
-	struct dtv_frontend_properties *p = &fe->dtv_property_cache;
+//	struct dtv_frontend_properties *p = &fe->dtv_property_cache;
 
 	dev_dbg(&priv->i2c->dev, "%s()\n", __func__);
 	if (priv->state == STATE_ACTIVE_S)
@@ -3747,9 +3747,9 @@ static struct dvb_frontend_ops cxd2841er_dvbs_s2_ops = {
 	.delsys = { SYS_DVBS, SYS_DVBS2 },
 	.info = {
 		.name		= "Sony CXD2841ER DVB-S/S2 demodulator",
-		.frequency_min	= 500000,
-		.frequency_max	= 2500000,
-		.frequency_stepsize	= 0,
+		.frequency_min_hz	= 500 * MHz,
+		.frequency_max_hz	= 2500 *MHz,
+		.frequency_stepsize_hz	= 0,
 		.symbol_rate_min = 1000000,
 		.symbol_rate_max = 45000000,
 		.symbol_rate_tolerance = 500,
@@ -3793,8 +3793,8 @@ static struct  dvb_frontend_ops cxd2841er_t_c_ops = {
 			FE_CAN_HIERARCHY_AUTO |
 			FE_CAN_MUTE_TS |
 			FE_CAN_2G_MODULATION,
-		.frequency_min = 42000000,
-		.frequency_max = 1002000000
+		.frequency_min_hz = 42 *MHz,
+		.frequency_max_hz = 1002 * MHz
 	},
 	.init = cxd2841er_init_tc,
 	.sleep = cxd2841er_sleep_tc,
diff --git a/drivers/media/amlogic/wetek/mn88436.c b/drivers/media/amlogic/wetek/mn88436.c
index 755e51e..34b6dfb 100644
--- a/drivers/media/amlogic/wetek/mn88436.c
+++ b/drivers/media/amlogic/wetek/mn88436.c
@@ -180,9 +180,9 @@ err:
 	dev_dbg(&state->i2c->dev, "%s: failed=%d\n", __func__, ret);
 	return ret;
 }
-static int mn88436_get_frontend(struct dvb_frontend *fe)
+static int mn88436_get_frontend(struct dvb_frontend *fe, struct dtv_frontend_properties *p)
 {
-	struct dtv_frontend_properties *p = &fe->dtv_property_cache;
+//	struct dtv_frontend_properties *p = &fe->dtv_property_cache;
 	struct mn88436_state *state = fe->demodulator_priv;
 
 	p->modulation = state->current_modulation;
@@ -306,8 +306,8 @@ static struct dvb_frontend_ops mn88436_ops = {
 	.delsys = { SYS_ATSC },
 	.info = {
 		.name = "Panasonic MN88436",		
-		.frequency_min = 51000000,
-		.frequency_max = 858000000,
+		.frequency_min_hz = 51 * MHz,
+		.frequency_max_hz = 858 * MHz,
 		.caps = FE_CAN_8VSB
 	},
 	.init = mn88436_init,
diff --git a/drivers/media/amlogic/wetek/mxl603.c b/drivers/media/amlogic/wetek/mxl603.c
index bc7018c..a496667 100644
--- a/drivers/media/amlogic/wetek/mxl603.c
+++ b/drivers/media/amlogic/wetek/mxl603.c
@@ -996,21 +996,21 @@ err:
 	return ret;
 }
 
-static int mxl603_release(struct dvb_frontend *fe)
+void mxl603_release(struct dvb_frontend *fe)
 {
 	struct mxl603_state *state = fe->tuner_priv;
 
 	fe->tuner_priv = NULL;
 	kfree(state);
 	
-	return 0;
+	return;
 }
 static struct dvb_tuner_ops mxl603_tuner_ops = {
 	.info = {
 		.name = "MaxLinear MxL603",
-		.frequency_min = 1000000,
-		.frequency_max = 1200000000,
-		.frequency_step = 25000,
+		.frequency_min_hz = 1 * MHz,
+		.frequency_max_hz = 1200 * MHz,
+		.frequency_step_hz = 25 * kHz,
 	},
 	.init              = mxl603_init,
 	.sleep             = mxl603_sleep,
--
