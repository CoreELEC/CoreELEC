diff --git a/drivers/media/rc/meson-ir.c b/drivers/media/rc/meson-ir.c
index f449b35..eabe839 100644
--- a/drivers/media/rc/meson-ir.c
+++ b/drivers/media/rc/meson-ir.c
@@ -20,6 +20,7 @@
 #include <linux/platform_device.h>
 #include <linux/spinlock.h>
 #include <linux/bitfield.h>
+#include <linux/pinctrl/consumer.h>
 
 #include <media/rc-core.h>
 
@@ -112,6 +128,7 @@ static int meson_ir_probe(struct platform_device *pdev)
 	const char *map_name;
 	struct meson_ir *ir;
 	int irq, ret;
+	struct pinctrl *pinctrl;
 
 	ir = devm_kzalloc(dev, sizeof(struct meson_ir), GFP_KERNEL);
 	if (!ir)
@@ -124,6 +141,14 @@ static int meson_ir_probe(struct platform_device *pdev)
 		return PTR_ERR(ir->reg);
 	}
 
+	if (of_get_property(node, "pinctrl-names", NULL)) {
+		pinctrl = devm_pinctrl_get_select_default(dev);
+		if (IS_ERR(pinctrl)) {
+			dev_err(dev, "failed to get pinctrl\n");
+			ret = PTR_ERR(pinctrl);
+		}
+	}
+
 	irq = platform_get_irq(pdev, 0);
 	if (irq < 0) {
 		dev_err(dev, "no irq resource\n");
diff --git a/drivers/media/rc/Kconfig b/drivers/media/rc/Kconfig
index eb2c3b6..af79f29 100644
--- a/drivers/media/rc/Kconfig
+++ b/drivers/media/rc/Kconfig
@@ -249,7 +249,6 @@ config IR_FINTEK
 config IR_MESON
 	tristate "Amlogic Meson IR remote receiver"
 	depends on RC_CORE
-	depends on ARCH_MESON || COMPILE_TEST
 	---help---
 	   Say Y if you want to use the IR remote receiver available
 	   on Amlogic Meson SoCs.
--- a/drivers/media/rc/rc-main.c	2018-11-23 06:40:12.000000000 +0100
+++ b/drivers/media/rc/rc-main.c	2018-09-23 16:38:07.000000000 +0200
@@ -274,6 +274,7 @@
 				      unsigned int new_keycode)
 {
 	int old_keycode = rc_map->scan[index].keycode;
+	int i;
 
 	/* Did the user wish to remove the mapping? */
 	if (new_keycode == KEY_RESERVED || new_keycode == KEY_UNKNOWN) {
@@ -288,9 +289,20 @@
 			old_keycode == KEY_RESERVED ? "New" : "Replacing",
 			rc_map->scan[index].scancode, new_keycode);
 		rc_map->scan[index].keycode = new_keycode;
+		__set_bit(new_keycode, dev->input_dev->keybit);
 	}
 
 	if (old_keycode != KEY_RESERVED) {
+		/* A previous mapping was updated... */
+		__clear_bit(old_keycode, dev->input_dev->keybit);
+		/* ... but another scancode might use the same keycode */
+		for (i = 0; i < rc_map->len; i++) {
+			if (rc_map->scan[i].keycode == old_keycode) {
+				__set_bit(old_keycode, dev->input_dev->keybit);
+				break;
+			}
+		}
+
 		/* Possibly shrink the keytable, failure is not a problem */
 		ir_resize_table(dev, rc_map, GFP_ATOMIC);
 	}
@@ -667,14 +679,6 @@
 	spin_unlock_irqrestore(&dev->keylock, flags);
 }
 
-static unsigned int repeat_period(int protocol)
-{
-	if (protocol >= ARRAY_SIZE(protocols))
-		return 100;
-
-	return protocols[protocol].repeat_period;
-}
-
 /**
  * rc_repeat() - signals that a key is still pressed
  * @dev:	the struct rc_dev descriptor of the device
@@ -687,7 +691,7 @@
 {
 	unsigned long flags;
 	unsigned int timeout = nsecs_to_jiffies(dev->timeout) +
-		msecs_to_jiffies(repeat_period(dev->last_protocol));
+		msecs_to_jiffies(protocols[dev->last_protocol].repeat_period);
 	struct lirc_scancode sc = {
 		.scancode = dev->last_scancode, .rc_proto = dev->last_protocol,
 		.keycode = dev->keypressed ? dev->last_keycode : KEY_RESERVED,
@@ -695,8 +699,7 @@
 			 (dev->last_toggle ? LIRC_SCANCODE_FLAG_TOGGLE : 0)
 	};
 
-	if (dev->allowed_protocols != RC_PROTO_BIT_CEC)
-		ir_lirc_scancode_event(dev, &sc);
+	ir_lirc_scancode_event(dev, &sc);
 
 	spin_lock_irqsave(&dev->keylock, flags);
 
@@ -736,8 +739,7 @@
 		.keycode = keycode
 	};
 
-	if (dev->allowed_protocols != RC_PROTO_BIT_CEC)
-		ir_lirc_scancode_event(dev, &sc);
+	ir_lirc_scancode_event(dev, &sc);
 
 	if (new_event && dev->keypressed)
 		ir_do_keyup(dev, false);
@@ -801,7 +803,7 @@
 
 	if (dev->keypressed) {
 		dev->keyup_jiffies = jiffies + nsecs_to_jiffies(dev->timeout) +
-			msecs_to_jiffies(repeat_period(protocol));
+			msecs_to_jiffies(protocols[protocol].repeat_period);
 		mod_timer(&dev->timer_keyup, dev->keyup_jiffies);
 	}
 	spin_unlock_irqrestore(&dev->keylock, flags);
@@ -1745,18 +1747,10 @@
 		dev->enabled_protocols = rc_proto;
 	}
 
-	/* Keyboard events */
 	set_bit(EV_KEY, dev->input_dev->evbit);
 	set_bit(EV_REP, dev->input_dev->evbit);
 	set_bit(EV_MSC, dev->input_dev->evbit);
 	set_bit(MSC_SCAN, dev->input_dev->mscbit);
-	bitmap_fill(dev->input_dev->keybit, KEY_CNT);
-
-	/* Pointer/mouse events */
-	set_bit(EV_REL, dev->input_dev->evbit);
-	set_bit(REL_X, dev->input_dev->relbit);
-	set_bit(REL_Y, dev->input_dev->relbit);
-
 	if (dev->open)
 		dev->input_dev->open = ir_open;
 	if (dev->close)
@@ -1952,8 +1946,6 @@
 	rc_free_rx_device(dev);
 
 	mutex_lock(&dev->lock);
-	if (dev->users && dev->close)
-		dev->close(dev);
 	dev->registered = false;
 	mutex_unlock(&dev->lock);
 
2.14.1

