--- a/drivers/media/usb/dvb-usb-v2/Kconfig	2018-07-31 07:40:10.000000000 +0200
+++ b/drivers/media/usb/dvb-usb-v2/Kconfig	2018-09-18 00:04:00.779447016 +0200
@@ -133,6 +133,7 @@
 	depends on DVB_USB_V2 && I2C_MUX
 	select DVB_MN88472 if MEDIA_SUBDRV_AUTOSELECT
 	select DVB_MN88473 if MEDIA_SUBDRV_AUTOSELECT
+	select DVB_CXD2841ER if MEDIA_SUBDRV_AUTOSELECT
 	select DVB_RTL2830
 	select DVB_RTL2832
 	select DVB_RTL2832_SDR if (MEDIA_SUBDRV_AUTOSELECT && MEDIA_SDR_SUPPORT)
--- a/drivers/media/usb/dvb-usb-v2/rtl28xxu.h	2016-08-22 10:58:36.000000000 +0200
+++ b/drivers/media/usb/dvb-usb-v2/rtl28xxu.h	2018-09-18 00:00:20.673554419 +0200
@@ -31,6 +31,7 @@
 #include "rtl2832_sdr.h"
 #include "mn88472.h"
 #include "mn88473.h"
+#include "cxd2841er.h"
 
 #include "qt1010.h"
 #include "mt2060.h"
@@ -87,7 +88,10 @@
 	#define SLAVE_DEMOD_MN88472        1
 	#define SLAVE_DEMOD_MN88473        2
 	#define SLAVE_DEMOD_SI2168         3
+	#define SLAVE_DEMOD_TYPE1          0
+	#define SLAVE_DEMOD_TYPE2          1
 	unsigned int slave_demod:2;
+	unsigned int slave_demod_type:1;
 	union {
 		struct rtl2830_platform_data rtl2830_platform_data;
 		struct rtl2832_platform_data rtl2832_platform_data;
--- a/drivers/media/usb/dvb-usb-v2/rtl28xxu.c	2018-09-12 07:40:12.000000000 +0200
+++ b/drivers/media/usb/dvb-usb-v2/rtl28xxu.c	2018-09-18 00:01:51.024357016 +0200
@@ -386,7 +386,8 @@
 	struct rtl28xxu_req req_mn88473 = {0xff38, CMD_I2C_RD, 1, buf};
 	struct rtl28xxu_req req_si2157 = {0x00c0, CMD_I2C_RD, 1, buf};
 	struct rtl28xxu_req req_si2168 = {0x00c8, CMD_I2C_RD, 1, buf};
-
+	struct rtl28xxu_req req_cxd2837er = {0x68d8, CMD_I2C_RD, 1, buf};
+	
 	dev_dbg(&d->intf->dev, "\n");
 
 	/* enable GPIO3 and GPIO6 as output */
@@ -565,6 +566,14 @@
 		if (ret == 0 && buf[0] == 0x03) {
 			dev_dbg(&d->intf->dev, "MN88473 found\n");
 			dev->slave_demod = SLAVE_DEMOD_MN88473;
+			dev->slave_demod_type = SLAVE_DEMOD_TYPE1;
+			goto demod_found;
+		}
+		ret = rtl28xxu_ctrl_msg(d, &req_cxd2837er);
+		if (ret == 0 && buf[0] == 0x03) {
+			dev_dbg(&d->intf->dev, "CXD2837ER found");
+			dev->slave_demod = SLAVE_DEMOD_MN88473;
+			dev->slave_demod_type = SLAVE_DEMOD_TYPE2;
 			goto demod_found;
 		}
 	}
@@ -687,7 +696,7 @@
 
 	/* attach demodulator */
 	memset(&board_info, 0, sizeof(board_info));
-	strscpy(board_info.type, "rtl2830", I2C_NAME_SIZE);
+	strlcpy(board_info.type, "rtl2830", I2C_NAME_SIZE);
 	board_info.addr = 0x10;
 	board_info.platform_data = pdata;
 	request_module("%s", board_info.type);
@@ -908,7 +917,7 @@
 
 	/* attach demodulator */
 	memset(&board_info, 0, sizeof(board_info));
-	strscpy(board_info.type, "rtl2832", I2C_NAME_SIZE);
+	strlcpy(board_info.type, "rtl2832", I2C_NAME_SIZE);
 	board_info.addr = 0x10;
 	board_info.platform_data = pdata;
 	request_module("%s", board_info.type);
@@ -947,7 +956,7 @@
 
 			mn88472_config.fe = &adap->fe[1];
 			mn88472_config.i2c_wr_max = 22,
-			strscpy(info.type, "mn88472", I2C_NAME_SIZE);
+			strlcpy(info.type, "mn88472", I2C_NAME_SIZE);
 			mn88472_config.xtal = 20500000;
 			mn88472_config.ts_mode = SERIAL_TS_MODE;
 			mn88472_config.ts_clock = VARIABLE_TS_CLOCK;
@@ -967,12 +976,12 @@
 			}
 
 			dev->i2c_client_slave_demod = client;
-		} else if (dev->slave_demod == SLAVE_DEMOD_MN88473) {
+		} else if (dev->slave_demod == SLAVE_DEMOD_MN88473 && dev->slave_demod_type == SLAVE_DEMOD_TYPE1) {
 			struct mn88473_config mn88473_config = {};
 
 			mn88473_config.fe = &adap->fe[1];
 			mn88473_config.i2c_wr_max = 22,
-			strscpy(info.type, "mn88473", I2C_NAME_SIZE);
+			strlcpy(info.type, "mn88473", I2C_NAME_SIZE);
 			info.addr = 0x18;
 			info.platform_data = &mn88473_config;
 			request_module(info.type);
@@ -989,6 +998,28 @@
 			}
 
 			dev->i2c_client_slave_demod = client;
+		} else if (dev->slave_demod == SLAVE_DEMOD_MN88473 && dev->slave_demod_type == SLAVE_DEMOD_TYPE2) {
+			struct cxd2841er_config cfg = {};
+			cfg.i2c_addr = 0xd8;
+			cfg.xtal = SONY_XTAL_20500;
+			cfg.flags = CXD2841ER_AUTO_IFHZ | CXD2841ER_EARLY_TUNE |
+				CXD2841ER_NO_WAIT_LOCK | CXD2841ER_NO_AGCNEG |
+				CXD2841ER_TSBITS | CXD2841ER_TS_SERIAL;
+			
+			adap->fe[1] = dvb_attach( cxd2841er_attach_t_c, &cfg, &d->i2c_adap );
+			
+			        if (!adap->fe[1]) {
+					dev_err(&d->intf->dev, "CXD2837ER attach failed!\n");
+					return -ENODEV;
+					}
+
+			if (!try_module_get(client->dev.driver->owner)) {
+				i2c_unregister_device(client);
+				dev->slave_demod = SLAVE_DEMOD_NONE;
+				goto err_slave_demod_failed;
+			}
+
+			dev->i2c_client_slave_demod = client;
 		} else {
 			struct si2168_config si2168_config = {};
 			struct i2c_adapter *adapter;
@@ -998,7 +1029,7 @@
 			si2168_config.ts_mode = SI2168_TS_SERIAL;
 			si2168_config.ts_clock_inv = false;
 			si2168_config.ts_clock_gapped = true;
-			strscpy(info.type, "si2168", I2C_NAME_SIZE);
+			strlcpy(info.type, "si2168", I2C_NAME_SIZE);
 			info.addr = 0x64;
 			info.platform_data = &si2168_config;
 			request_module(info.type);
@@ -1046,10 +1077,13 @@
 	dev_dbg(&d->intf->dev, "\n");
 
 	/* remove I2C slave demod */
-	client = dev->i2c_client_slave_demod;
-	if (client) {
+	if (dev->slave_demod == SLAVE_DEMOD_MN88473 && dev->slave_demod_type == SLAVE_DEMOD_TYPE2) { dev_info(&d->intf->dev,"Sony CXD2837ER detached automatically.");}
+	else {
+		client = dev->i2c_client_slave_demod;
+		if (client) {
 		module_put(client->dev.driver->owner);
 		i2c_unregister_device(client);
+		}
 	}
 
 	/* remove I2C demod */
@@ -1189,7 +1223,7 @@
 				.clock = 28800000,
 			};
 
-			strscpy(info.type, "e4000", I2C_NAME_SIZE);
+			strlcpy(info.type, "e4000", I2C_NAME_SIZE);
 			info.addr = 0x64;
 			info.platform_data = &e4000_config;
 
@@ -1213,7 +1247,7 @@
 			};
 			struct i2c_board_info board_info = {};
 
-			strscpy(board_info.type, "fc2580", I2C_NAME_SIZE);
+			strlcpy(board_info.type, "fc2580", I2C_NAME_SIZE);
 			board_info.addr = 0x56;
 			board_info.platform_data = &fc2580_pdata;
 			request_module("fc2580");
@@ -1244,7 +1278,7 @@
 		if (ret)
 			goto err;
 
-		strscpy(board_info.type, "tua9001", I2C_NAME_SIZE);
+		strlcpy(board_info.type, "tua9001", I2C_NAME_SIZE);
 		board_info.addr = 0x60;
 		board_info.platform_data = &tua9001_pdata;
 		request_module("tua9001");
@@ -1289,7 +1323,7 @@
 				.inversion = false,
 			};
 
-			strscpy(info.type, "si2157", I2C_NAME_SIZE);
+			strlcpy(info.type, "si2157", I2C_NAME_SIZE);
 			info.addr = 0x60;
 			info.platform_data = &si2157_config;
 			request_module(info.type);
@@ -1732,7 +1766,7 @@
 		goto exit;
 
 	ret = rtl28xxu_rd_reg(d, IR_RX_BC, &buf[0]);
-	if (ret || buf[0] > sizeof(buf))
+	if (ret)
 		goto err;
 
 	len = buf[0];
@@ -1759,7 +1793,7 @@
 		ir_raw_event_store_with_filter(d->rc_dev, &ev);
 	}
 
-	/* 'flush'Â ir_raw_event_store_with_filter() */
+	/* 'flush' ir_raw_event_store_with_filter() */
 	ir_raw_event_set_idle(d->rc_dev, true);
 	ir_raw_event_handle(d->rc_dev);
 exit:
@@ -1961,3 +1995,4 @@
 MODULE_AUTHOR("Antti Palosaari <crope@iki.fi>");
 MODULE_AUTHOR("Thomas Mair <thomas.mair86@googlemail.com>");
 MODULE_LICENSE("GPL");
+
