From 394469b37c98a213b7ae2e2cdd257e98b6c40124 Mon Sep 17 00:00:00 2001
From: Portisch <hugo.portisch@yahoo.de>
Date: Tue, 1 Dec 2020 07:51:01 +0100
Subject: [PATCH] implement BGRA8 for framebuffer

---
 spng/spng.c | 53 +++++++++++++++++++++++++++++++++++++++++++----------
 spng/spng.h |  1 +
 2 files changed, 44 insertions(+), 10 deletions(-)

diff --git a/spng/spng.c b/spng/spng.c
index 6b24763..00feaca 100644
--- a/spng/spng.c
+++ b/spng/spng.c
@@ -458,6 +458,18 @@ static void rgb8_row_to_rgba8(const unsigned char *row, unsigned char *out, uint
     }
 }
 
+static void rgb8_row_to_bgra8(const unsigned char *row, unsigned char *out, uint32_t n)
+{
+    uint32_t i;
+    for(i=0; i < n; i++)
+    {
+        *(unsigned char *)(out + i * 4 + 0) = *(unsigned char *)(row + i * 3 + 2);
+        *(unsigned char *)(out + i * 4 + 1) = *(unsigned char *)(row + i * 3 + 1);
+        *(unsigned char *)(out + i * 4 + 2) = *(unsigned char *)(row + i * 3 + 0);
+        out[i*4+3] = 255;
+    }
+}
+
 /* Calculate scanline width in bits, round up to the nearest byte */
 static int calculate_scanline_width(struct spng_ctx *ctx, uint32_t width, size_t *scanline_width)
 {
@@ -1085,7 +1097,7 @@ static inline void gamma_correct_row(unsigned char *row, uint32_t pixels, int fm
 {
     uint32_t i;
 
-    if(fmt == SPNG_FMT_RGBA8)
+    if(fmt == SPNG_FMT_RGBA8 || fmt == SPNG_FMT_BGRA8)
     {
         unsigned char *px;
         for(i=0; i < pixels; i++)
@@ -1138,7 +1150,7 @@ static inline void trns_row(unsigned char *row,
     unsigned row_stride;
     unsigned depth = ihdr->bit_depth;
 
-    if(fmt == SPNG_FMT_RGBA8)
+    if(fmt == SPNG_FMT_RGBA8 || fmt == SPNG_FMT_BGRA8)
     {
         if(ihdr->color_type == SPNG_COLOR_TYPE_GRAYSCALE) return; /* already applied in the decoding loop */
 
@@ -1207,7 +1219,7 @@ static inline void scale_row(unsigned char *row, uint32_t pixels, int fmt, unsig
 {
     uint32_t i;
 
-    if(fmt == SPNG_FMT_RGBA8)
+    if(fmt == SPNG_FMT_RGBA8 || fmt == SPNG_FMT_BGRA8)
     {
         unsigned char px[4];
         for(i=0; i < pixels; i++)
@@ -1273,7 +1285,7 @@ void expand_row(unsigned char *row, unsigned char *scanline, struct spng_plte_en
     uint32_t i;
     unsigned char *px;
     unsigned char entry;
-    if(fmt == SPNG_FMT_RGBA8)
+    if(fmt == SPNG_FMT_RGBA8 || fmt == SPNG_FMT_BGRA8)
     {
         for(i=0; i < width; i++)
         {
@@ -2510,6 +2522,11 @@ int spng_decode_scanline(spng_ctx *ctx, void *out, size_t len)
                     rgb8_row_to_rgba8(scanline, out, width);
                     break;
                 }
+                else if(fmt == SPNG_FMT_BGRA8)
+                {
+                    rgb8_row_to_bgra8(scanline, out, width);
+                    break;
+                }
 
                 memcpy(&r_8, scanline + (k * 3), 1);
                 memcpy(&g_8, scanline + (k * 3) + 1, 1);
@@ -2524,7 +2541,7 @@ int spng_decode_scanline(spng_ctx *ctx, void *out, size_t len)
 
             if(ctx->ihdr.bit_depth == 8)
             {
-                if(fmt & (SPNG_FMT_RGBA8 | SPNG_FMT_RGB8))
+                if(fmt & (SPNG_FMT_RGBA8 | SPNG_FMT_RGB8 | SPNG_FMT_BGRA8))
                 {
                     expand_row(out, scanline, plte, width, fmt);
                     break;
@@ -2543,7 +2560,7 @@ int spng_decode_scanline(spng_ctx *ctx, void *out, size_t len)
                 shift_amount -= ctx->ihdr.bit_depth;
             }
 
-            if(fmt & (SPNG_FMT_RGBA8 | SPNG_FMT_RGB8))
+            if(fmt & (SPNG_FMT_RGBA8 | SPNG_FMT_RGB8 | SPNG_FMT_BGRA8))
             {
                 pixel[0] = plte[entry].red;
                 pixel[1] = plte[entry].green;
@@ -2552,6 +2569,15 @@ int spng_decode_scanline(spng_ctx *ctx, void *out, size_t len)
 
                 continue;
             }
+            else if(fmt & SPNG_FMT_BGRA8)
+            {
+                pixel[0] = plte[entry].blue;
+                pixel[1] = plte[entry].green;
+                pixel[2] = plte[entry].red;
+                pixel[3] = plte[entry].alpha;
+
+                continue;
+            }
             else /* RGBA16 */
             {
                 r_16 = plte[entry].red;
@@ -2652,6 +2678,13 @@ int spng_decode_scanline(spng_ctx *ctx, void *out, size_t len)
 
             if(fmt == SPNG_FMT_RGBA8) memcpy(pixel + 3, &a_8, 1);
         }
+        else if(fmt & SPNG_FMT_BGRA8)
+        {
+            memcpy(pixel, &b_8, 1);
+            memcpy(pixel + 1, &g_8, 1);
+            memcpy(pixel + 2, &r_8, 1);
+            memcpy(pixel + 3, &a_8, 1);
+        }
         else if(fmt == SPNG_FMT_RGBA16)
         {
             if(ctx->ihdr.bit_depth != 16)
@@ -2901,7 +2934,7 @@ int spng_decode_image(spng_ctx *ctx, void *out, size_t len, int fmt, int flags)
 
         unsigned lut_entries;
 
-        if(fmt & (SPNG_FMT_RGBA8 | SPNG_FMT_RGB8))
+        if(fmt & (SPNG_FMT_RGBA8 | SPNG_FMT_RGB8 | SPNG_FMT_BGRA8))
         {
             lut_entries = 256;
             max = 255.0f;
@@ -2974,7 +3007,7 @@ int spng_decode_image(spng_ctx *ctx, void *out, size_t len, int fmt, int flags)
         }
     }
 
-    if(ihdr->bit_depth == 16 && fmt & (SPNG_FMT_RGBA8 | SPNG_FMT_RGB8))
+    if(ihdr->bit_depth == 16 && fmt & (SPNG_FMT_RGBA8 | SPNG_FMT_RGB8 | SPNG_FMT_BGRA8))
     {/* samples are scaled down by 8 bits in the decode loop */
         sb->red_bits -= 8;
         sb->green_bits -= 8;
@@ -3037,7 +3070,7 @@ int spng_decode_image(spng_ctx *ctx, void *out, size_t len, int fmt, int flags)
 
     if(f.apply_trns)
     {
-        if(fmt & (SPNG_FMT_RGBA8 | SPNG_FMT_RGBA16))
+        if(fmt & (SPNG_FMT_RGBA8 | SPNG_FMT_RGBA16 | SPNG_FMT_BGRA8))
         {
             if(ihdr->color_type == SPNG_COLOR_TYPE_TRUECOLOR)
             {
@@ -3366,7 +3399,7 @@ int spng_decoded_image_size(spng_ctx *ctx, int fmt, size_t *len)
     /* Currently all enums are single-bit values */
     if(fmt & ((unsigned)fmt - 1)) return SPNG_EFMT; /* More than one bit is set */
 
-    if(fmt == SPNG_FMT_RGBA8)
+    if(fmt == SPNG_FMT_RGBA8 || fmt == SPNG_FMT_BGRA8)
     {
         bytes_per_pixel = 4;
     }
diff --git a/spng/spng.h b/spng/spng.h
index 70ea494..048ee9e 100644
--- a/spng/spng.h
+++ b/spng/spng.h
@@ -144,6 +144,7 @@ enum spng_format
     SPNG_FMT_RGBA8 = 1,
     SPNG_FMT_RGBA16 = 2,
     SPNG_FMT_RGB8 = 4,
+    SPNG_FMT_BGRA8 = 8,
 
     /* Partially implemented, see documentation */
     SPNG_FMT_GA8 = 16,
-- 
2.29.2

