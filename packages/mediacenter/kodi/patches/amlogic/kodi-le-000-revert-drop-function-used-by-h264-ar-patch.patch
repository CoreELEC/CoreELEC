From 4d0b848d096e9624a59aa4f5aa985706a0c18959 Mon Sep 17 00:00:00 2001
From: Adam Green <greena88@gmail.com>
Date: Tue, 3 Apr 2018 04:01:40 +0100
Subject: [PATCH] Revert "drop unused function parseh264_sps"

This function is used by h264 aspect ratio detection patch.

This reverts commit d1a8f39989580ac371fb1e78c174830002549660.
---
 xbmc/utils/BitstreamConverter.cpp | 83 +++++++++++++++++++++++++++++++++++++++
 xbmc/utils/BitstreamConverter.h   |  1 +
 2 files changed, 84 insertions(+)

diff --git a/xbmc/utils/BitstreamConverter.cpp b/xbmc/utils/BitstreamConverter.cpp
index c5cff00..0f335fd 100644
--- a/xbmc/utils/BitstreamConverter.cpp
+++ b/xbmc/utils/BitstreamConverter.cpp
@@ -1224,3 +1224,86 @@ bool CBitstreamConverter::mpeg2_sequence_header(const uint8_t *data, const uint3
   return changed;
 }
 
+void CBitstreamConverter::parseh264_sps(const uint8_t *sps, const uint32_t sps_size, bool *interlaced, int32_t *max_ref_frames)
+{
+  nal_bitstream bs;
+  sps_info_struct sps_info;
+
+  nal_bs_init(&bs, sps, sps_size);
+
+  sps_info.profile_idc  = nal_bs_read(&bs, 8);
+  nal_bs_read(&bs, 1);  // constraint_set0_flag
+  nal_bs_read(&bs, 1);  // constraint_set1_flag
+  nal_bs_read(&bs, 1);  // constraint_set2_flag
+  nal_bs_read(&bs, 1);  // constraint_set3_flag
+  nal_bs_read(&bs, 4);  // reserved
+  sps_info.level_idc    = nal_bs_read(&bs, 8);
+  sps_info.sps_id       = nal_bs_read_ue(&bs);
+
+  if (sps_info.profile_idc == 100 ||
+      sps_info.profile_idc == 110 ||
+      sps_info.profile_idc == 122 ||
+      sps_info.profile_idc == 244 ||
+      sps_info.profile_idc == 44  ||
+      sps_info.profile_idc == 83  ||
+      sps_info.profile_idc == 86)
+  {
+    sps_info.chroma_format_idc                    = nal_bs_read_ue(&bs);
+    if (sps_info.chroma_format_idc == 3)
+      sps_info.separate_colour_plane_flag         = nal_bs_read(&bs, 1);
+    sps_info.bit_depth_luma_minus8                = nal_bs_read_ue(&bs);
+    sps_info.bit_depth_chroma_minus8              = nal_bs_read_ue(&bs);
+    sps_info.qpprime_y_zero_transform_bypass_flag = nal_bs_read(&bs, 1);
+
+    sps_info.seq_scaling_matrix_present_flag = nal_bs_read (&bs, 1);
+    if (sps_info.seq_scaling_matrix_present_flag)
+    {
+      //! @todo unfinished
+    }
+  }
+  sps_info.log2_max_frame_num_minus4 = nal_bs_read_ue(&bs);
+  if (sps_info.log2_max_frame_num_minus4 > 12)
+  { // must be between 0 and 12
+    return;
+  }
+  sps_info.pic_order_cnt_type = nal_bs_read_ue(&bs);
+  if (sps_info.pic_order_cnt_type == 0)
+  {
+    sps_info.log2_max_pic_order_cnt_lsb_minus4 = nal_bs_read_ue(&bs);
+  }
+  else if (sps_info.pic_order_cnt_type == 1)
+  { //! @todo unfinished
+    /*
+    delta_pic_order_always_zero_flag = gst_nal_bs_read (bs, 1);
+    offset_for_non_ref_pic = gst_nal_bs_read_se (bs);
+    offset_for_top_to_bottom_field = gst_nal_bs_read_se (bs);
+
+    num_ref_frames_in_pic_order_cnt_cycle = gst_nal_bs_read_ue (bs);
+    for( i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i++ )
+    offset_for_ref_frame[i] = gst_nal_bs_read_se (bs);
+    */
+  }
+
+  sps_info.max_num_ref_frames             = nal_bs_read_ue(&bs);
+  sps_info.gaps_in_frame_num_value_allowed_flag = nal_bs_read(&bs, 1);
+  sps_info.pic_width_in_mbs_minus1        = nal_bs_read_ue(&bs);
+  sps_info.pic_height_in_map_units_minus1 = nal_bs_read_ue(&bs);
+
+  sps_info.frame_mbs_only_flag            = nal_bs_read(&bs, 1);
+  if (!sps_info.frame_mbs_only_flag)
+    sps_info.mb_adaptive_frame_field_flag = nal_bs_read(&bs, 1);
+
+  sps_info.direct_8x8_inference_flag      = nal_bs_read(&bs, 1);
+
+  sps_info.frame_cropping_flag            = nal_bs_read(&bs, 1);
+  if (sps_info.frame_cropping_flag)
+  {
+    sps_info.frame_crop_left_offset       = nal_bs_read_ue(&bs);
+    sps_info.frame_crop_right_offset      = nal_bs_read_ue(&bs);
+    sps_info.frame_crop_top_offset        = nal_bs_read_ue(&bs);
+    sps_info.frame_crop_bottom_offset     = nal_bs_read_ue(&bs);
+  }
+
+  *interlaced = !sps_info.frame_mbs_only_flag;
+  *max_ref_frames = sps_info.max_num_ref_frames;
+}
diff --git a/xbmc/utils/BitstreamConverter.h b/xbmc/utils/BitstreamConverter.h
index caa8654..0e5be31 100644
--- a/xbmc/utils/BitstreamConverter.h
+++ b/xbmc/utils/BitstreamConverter.h
@@ -109,6 +109,7 @@ public:
   void              ResetStartDecode(void);
   bool              CanStartDecode() const;
 
+  static void       parseh264_sps(const uint8_t *sps, const uint32_t sps_size, bool *interlaced, int32_t *max_ref_frames);
   static bool       mpeg2_sequence_header(const uint8_t *data, const uint32_t size, mpeg2_sequence *sequence);
 
 protected:
-- 
2.7.4

