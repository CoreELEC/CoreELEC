From 724e5af213f5ac5a6000e37fc252d91f2838b47b Mon Sep 17 00:00:00 2001
From: Zongdong Jiao <zongdong.jiao@amlogic.com>
Date: Wed, 11 Mar 2020 12:43:06 +0800
Subject: hdmitx: add sysfs 'hdmi_used' [1/4]

PD#SWPL-22037

Problem:
Once HDMI cable was plugin at any time, then consider
'hdmi_used' as 1.

Solution:
Add new sysfs
/sys/class/amhdmitx/amhdmitx0/hdmi_used

Verify:
G12

Change-Id: I85aeb2722ae2f4f87fcbb6bb07217c8dcea4f373
Signed-off-by: Zongdong Jiao <zongdong.jiao@amlogic.com>
---
 .../vout/hdmitx/hdmi_tx_20/hdmi_tx_main.c     | 24 ++++++++++++++++++-
 .../media/vout/hdmi_tx/hdmi_tx_module.h       |  3 +++
 2 files changed, 26 insertions(+), 1 deletion(-)

diff --git a/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hdmi_tx_main.c b/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hdmi_tx_main.c
index 49058e8086b7..c8d0a7048360 100644
--- a/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hdmi_tx_main.c
+++ b/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hdmi_tx_main.c
@@ -206,6 +206,8 @@ static void hdmitx_late_resume(struct early_suspend *h)
 	/* update status for hpd and switch/state */
 	hdmitx_device.hpd_state = !!(hdmitx_device.hwop.cntlmisc(&hdmitx_device,
 		MISC_HPD_GPI_ST, 0));
+	if (hdmitx_device.hpd_state)
+		hdmitx_device.already_used = 1;
 
 	pr_info("hdmitx hpd state: %d\n", hdmitx_device.hpd_state);
 	hdmitx_notify_hpd(hdmitx_device.hpd_state);
@@ -4058,6 +4060,16 @@ static ssize_t show_hpd_state(struct device *dev,
 	return pos;
 }
 
+static ssize_t show_hdmi_used(struct device *dev,
+	struct device_attribute *attr, char *buf)
+{
+	int pos = 0;
+
+	pos += snprintf(buf+pos, PAGE_SIZE, "%d",
+		hdmitx_device.already_used);
+	return pos;
+}
+
 static ssize_t show_fake_plug(struct device *dev,
 			      struct device_attribute *attr, char *buf)
 {
@@ -4758,6 +4770,7 @@ static DEVICE_ATTR(disp_cap_3d, 0444, show_disp_cap_3d, NULL);
 static DEVICE_ATTR(hdcp_ksv_info, 0444, show_hdcp_ksv_info, NULL);
 static DEVICE_ATTR(hdcp_ver, 0444, show_hdcp_ver, NULL);
 static DEVICE_ATTR(hpd_state, 0444, show_hpd_state, NULL);
+static DEVICE_ATTR(hdmi_used, 0444, show_hdmi_used, NULL);
 static DEVICE_ATTR(rhpd_state, 0444, show_rhpd_state, NULL);
 static DEVICE_ATTR(max_exceed, 0444, show_max_exceed_state, NULL);
 static DEVICE_ATTR(fake_plug, 0664, show_fake_plug, store_fake_plug);
@@ -5140,6 +5153,7 @@ static void hdmitx_hpd_plugin_handler(struct work_struct *work)
 	struct hdmitx_dev *hdev = container_of((struct delayed_work *)work,
 		struct hdmitx_dev, work_hpd_plugin);
 
+	hdev->already_used = 1;
 	if (!(hdev->hdmitx_event & (HDMI_TX_HPD_PLUGIN)))
 		return;
 	if (hdev->rxsense_policy) {
@@ -5305,6 +5319,8 @@ static int hdmi_task_handle(void *data)
 		hdmitx_device, MISC_HPD_GPI_ST, 0));
 	hdmitx_device->hpd_state = hdmitx_extcon_hdmi->state;
 	hdmitx_notify_hpd(hdmitx_device->hpd_state);
+	if (hdmitx_device->hpd_state)
+		hdmitx_device->already_used = 1;
 
 	extcon_set_state_sync(hdmitx_extcon_power, EXTCON_DISP_HDMI,
 		hdmitx_device->hpd_state);
@@ -5344,9 +5360,11 @@ static int hdmi_task_handle(void *data)
 
 	/* Trigger HDMITX IRQ*/
 	hdmitx_device->hwop.cntlmisc(hdmitx_device, MISC_HPD_MUX_OP, PIN_MUX);
-	if (hdmitx_device->hwop.cntlmisc(hdmitx_device, MISC_HPD_GPI_ST, 0))
+	if (hdmitx_device->hwop.cntlmisc(hdmitx_device, MISC_HPD_GPI_ST, 0)) {
 		hdmitx_device->hwop.cntlmisc(hdmitx_device,
 			MISC_TRIGGER_HPD, 0);
+		hdmitx_device->already_used = 1;
+	}
 
 	hdmitx_device->hdmi_init = 1;
 	info = hdmitx_get_current_vinfo();
@@ -5941,6 +5959,7 @@ static int amhdmitx_probe(struct platform_device *pdev)
 	ret = device_create_file(dev, &dev_attr_div40);
 	ret = device_create_file(dev, &dev_attr_hdcp_ctrl);
 	ret = device_create_file(dev, &dev_attr_hpd_state);
+	ret = device_create_file(dev, &dev_attr_hdmi_used);
 	ret = device_create_file(dev, &dev_attr_rhpd_state);
 	ret = device_create_file(dev, &dev_attr_max_exceed);
 	ret = device_create_file(dev, &dev_attr_fake_plug);
@@ -5968,6 +5987,8 @@ static int amhdmitx_probe(struct platform_device *pdev)
 
 	hdmitx_device.hpd_state = !!(hdmitx_device.hwop.cntlmisc(
 		&hdmitx_device, MISC_HPD_GPI_ST, 0));
+	if (hdmitx_device.hpd_state)
+		hdmitx_device.already_used = 1;
 
 
 	vout_register_server(&hdmitx_vout_server);
@@ -6038,6 +6059,7 @@ static int amhdmitx_remove(struct platform_device *pdev)
 	device_remove_file(dev, &dev_attr_contenttype_cap);
 	device_remove_file(dev, &dev_attr_contenttype_mode);
 	device_remove_file(dev, &dev_attr_hpd_state);
+	device_remove_file(dev, &dev_attr_hdmi_used);
 	device_remove_file(dev, &dev_attr_fake_plug);
 	device_remove_file(dev, &dev_attr_rhpd_state);
 	device_remove_file(dev, &dev_attr_max_exceed);
diff --git a/include/linux/amlogic/media/vout/hdmi_tx/hdmi_tx_module.h b/include/linux/amlogic/media/vout/hdmi_tx/hdmi_tx_module.h
index 612380e969ac..91f78c33bb2c 100644
--- a/include/linux/amlogic/media/vout/hdmi_tx/hdmi_tx_module.h
+++ b/include/linux/amlogic/media/vout/hdmi_tx/hdmi_tx_module.h
@@ -460,6 +460,9 @@ struct hdmitx_dev {
 	unsigned int allm_mode; /* allm_mode: 1/on 0/off */
 	unsigned int ct_mode; /* 0/off 1/game, 2/graphcis, 3/photo, 4/cinema */
 	unsigned int sspll;
+	/* if HDMI plugin even once time, then set 1 */
+	/* if never hdmi plugin, then keep as 0 */
+	unsigned int already_used;
 	/* configure for I2S: 8ch in, 2ch out */
 	/* 0: default setting  1:ch0/1  2:ch2/3  3:ch4/5  4:ch6/7 */
 	unsigned int aud_output_ch;
-- 
2.17.1


From a4a263636ecf6d073228bb318b2c32f795769f61 Mon Sep 17 00:00:00 2001
From: hang cheng <hang.cheng@amlogic.com>
Date: Mon, 25 May 2020 21:10:54 +0800
Subject: hdmitx: optimize for ddc [1/1]

PD#SWPL-26700

Problem:
1.edid slave addr is changed to scdc slave addr,
result in edid read error and scdc msg not sent.
2.colorspace is forcely changed to RGB as vout
get hpd high and set mode before edid is read
when plug in during kernel boot.

Solution:
1.add mutex between edid and scdc
2.notify hpd to vout after edid done

Verify:
U215

Change-Id: I8763b348da49d152be8ce66dd50286c38def2ced
Signed-off-by: hang cheng <hang.cheng@amlogic.com>
---
 .../vout/hdmitx/hdmi_tx_20/hdmi_tx_main.c     | 30 ++++-------
 .../vout/hdmitx/hdmi_tx_20/hw/hdmi_tx_ddc.c   | 53 +++++++++++++++++++
 .../vout/hdmitx/hdmi_tx_20/hw/hdmi_tx_hw.c    | 52 ------------------
 .../media/vout/vout_serve/vout_serve.c        |  4 ++
 .../amlogic/media/vout/hdmi_tx/hdmi_tx_ddc.h  |  2 +-
 5 files changed, 69 insertions(+), 72 deletions(-)

diff --git a/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hdmi_tx_main.c b/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hdmi_tx_main.c
index c8d0a7048360..3a5405fefc11 100644
--- a/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hdmi_tx_main.c
+++ b/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hdmi_tx_main.c
@@ -4800,9 +4800,10 @@ static int hdmitx_set_current_vmode(enum vmode_e mode)
 
 	if (!(mode & VMODE_INIT_BIT_MASK) && get_hpd_state())
 		set_disp_mode_auto();
-	else
+	else {
 		pr_info("alread display in uboot\n");
-
+		edidinfo_attach_to_vinfo(&hdmitx_device);
+	}
 	return 0;
 }
 
@@ -5315,24 +5316,12 @@ static int hdmi_task_handle(void *data)
 	struct vinfo_s *info = NULL;
 	struct hdmitx_dev *hdmitx_device = (struct hdmitx_dev *)data;
 
-	hdmitx_extcon_hdmi->state = !!(hdmitx_device->hwop.cntlmisc(
-		hdmitx_device, MISC_HPD_GPI_ST, 0));
-	hdmitx_device->hpd_state = hdmitx_extcon_hdmi->state;
+	hdmitx_extcon_hdmi->state = hdmitx_device->hpd_state;
 	hdmitx_notify_hpd(hdmitx_device->hpd_state);
-	if (hdmitx_device->hpd_state)
-		hdmitx_device->already_used = 1;
 
 	extcon_set_state_sync(hdmitx_extcon_power, EXTCON_DISP_HDMI,
 		hdmitx_device->hpd_state);
 
-/* When init hdmi, clear the hdmitx module edid ram and edid buffer. */
-	hdmitx_edid_clear(hdmitx_device);
-	hdmitx_edid_ram_buffer_clear(hdmitx_device);
-	if (hdmitx_device->hpd_state) {
-		hdmitx_get_edid(hdmitx_device);
-		edidinfo_attach_to_vinfo(hdmitx_device);
-	}
-
 	INIT_WORK(&hdmitx_device->work_hdr, hdr_work_func);
 	hdmitx_device->hdmi_wq = alloc_workqueue(DEVICE_NAME,
 		WQ_HIGHPRI | WQ_CPU_INTENSIVE, 0);
@@ -5985,11 +5974,16 @@ static int amhdmitx_probe(struct platform_device *pdev)
 
 	HDMITX_Meson_Init(&hdmitx_device);
 
+	/* When init hdmi, clear the hdmitx module edid ram and edid buffer. */
+	hdmitx_edid_clear(&hdmitx_device);
+	hdmitx_edid_ram_buffer_clear(&hdmitx_device);
 	hdmitx_device.hpd_state = !!(hdmitx_device.hwop.cntlmisc(
 		&hdmitx_device, MISC_HPD_GPI_ST, 0));
-	if (hdmitx_device.hpd_state)
+	if (hdmitx_device.hpd_state) {
 		hdmitx_device.already_used = 1;
-
+		/* need to get edid before vout probe */
+		hdmitx_get_edid(&hdmitx_device);
+	}
 
 	vout_register_server(&hdmitx_vout_server);
 #ifdef CONFIG_AMLOGIC_VOUT2_SERVE
@@ -6010,8 +6004,6 @@ static int amhdmitx_probe(struct platform_device *pdev)
 	hdmitx_device.task = kthread_run(hdmi_task_handle,
 		&hdmitx_device, "kthread_hdmi");
 
-	edidinfo_attach_to_vinfo(&hdmitx_device);
-
 	return r;
 }
 
diff --git a/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hw/hdmi_tx_ddc.c b/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hw/hdmi_tx_ddc.c
index 8fa1c019af01..225aee2ada68 100644
--- a/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hw/hdmi_tx_ddc.c
+++ b/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hw/hdmi_tx_ddc.c
@@ -226,3 +226,56 @@ void edid_read_head_8bytes(void)
 	ddc_read_8byte(EDID_SLAVE, 0x00, head);
 }
 
+#define EDID_WAIT_TIMEOUT	10
+void hdmitx_read_edid(unsigned char *rx_edid)
+{
+	unsigned int timeout = 0;
+	unsigned int i;
+	unsigned int byte_num = 0;
+	unsigned char blk_no = 1;
+
+	if (!rx_edid)
+		return;
+	mutex_lock(&ddc_mutex);
+	/* Program SLAVE/ADDR */
+	hdmitx_wr_reg(HDMITX_DWC_I2CM_SLAVE, 0x50);
+	hdmitx_wr_reg(HDMITX_DWC_IH_I2CM_STAT0, 1 << 1);
+	/* Read complete EDID data sequentially */
+	while (byte_num < 128 * blk_no) {
+		hdmitx_wr_reg(HDMITX_DWC_I2CM_ADDRESS, byte_num & 0xff);
+		if ((byte_num >= 256) && (byte_num < 512) && (blk_no > 2)) {
+			/* Program SEGMENT/SEGPTR */
+			hdmitx_wr_reg(HDMITX_DWC_I2CM_SEGADDR, 0x30);
+			hdmitx_wr_reg(HDMITX_DWC_I2CM_SEGPTR, 0x1);
+			hdmitx_wr_reg(HDMITX_DWC_I2CM_OPERATION, 1 << 3);
+		} else {
+			hdmitx_wr_reg(HDMITX_DWC_I2CM_OPERATION, 1 << 2);
+		}
+		/* Wait until I2C done */
+		timeout = 0;
+		while (!(hdmitx_rd_reg(HDMITX_DWC_IH_I2CM_STAT0) & (1 << 1)) &&
+		       (timeout < EDID_WAIT_TIMEOUT)) {
+			usleep_range(2000, 2010);
+			timeout++;
+		}
+		if (timeout == EDID_WAIT_TIMEOUT)
+			pr_info(HW "ddc timeout\n");
+		hdmitx_wr_reg(HDMITX_DWC_IH_I2CM_STAT0, 1 << 1);
+		/* Read back 8 bytes */
+		for (i = 0; i < 8; i++) {
+			rx_edid[byte_num] =
+				hdmitx_rd_reg(HDMITX_DWC_I2CM_READ_BUFF0 + i);
+			if (byte_num == 126) {
+				blk_no = rx_edid[126] + 1;
+				if (blk_no > 4) {
+					pr_info(HW "edid extension block number:");
+					pr_info(HW " %d, reset to MAX 3\n",
+						blk_no - 1);
+					blk_no = 4; /* Max extended block */
+				}
+			}
+			byte_num++;
+		}
+	}
+	mutex_unlock(&ddc_mutex);
+}
diff --git a/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hw/hdmi_tx_hw.c b/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hw/hdmi_tx_hw.c
index beae6aea4c9b..813283835c84 100644
--- a/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hw/hdmi_tx_hw.c
+++ b/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hw/hdmi_tx_hw.c
@@ -4526,58 +4526,6 @@ static void hdmitx_getediddata(unsigned char *des, unsigned char *src)
 		des[i] = src[i];
 }
 
-/*
- * Note: read 8 Bytes of EDID data every time
- */
-#define EDID_WAIT_TIMEOUT	10
-static void hdmitx_read_edid(unsigned char *rx_edid)
-{
-	unsigned int timeout = 0;
-	unsigned int i;
-	unsigned int byte_num = 0;
-	unsigned char   blk_no = 1;
-
-	/* Program SLAVE/ADDR */
-	hdmitx_wr_reg(HDMITX_DWC_I2CM_SLAVE, 0x50);
-	hdmitx_wr_reg(HDMITX_DWC_IH_I2CM_STAT0, 1 << 1);
-	/* Read complete EDID data sequentially */
-	while (byte_num < 128 * blk_no) {
-		hdmitx_wr_reg(HDMITX_DWC_I2CM_ADDRESS,  byte_num&0xff);
-		if ((byte_num >= 256) && (byte_num < 512) && (blk_no > 2)) {
-			/* Program SEGMENT/SEGPTR */
-			hdmitx_wr_reg(HDMITX_DWC_I2CM_SEGADDR, 0x30);
-			hdmitx_wr_reg(HDMITX_DWC_I2CM_SEGPTR, 0x1);
-			hdmitx_wr_reg(HDMITX_DWC_I2CM_OPERATION, 1<<3);
-		} else
-			hdmitx_wr_reg(HDMITX_DWC_I2CM_OPERATION, 1<<2);
-		/* Wait until I2C done */
-		timeout = 0;
-		while ((!(hdmitx_rd_reg(HDMITX_DWC_IH_I2CM_STAT0) & (1 << 1)))
-			&& (timeout < EDID_WAIT_TIMEOUT)) {
-			mdelay(2);
-			timeout++;
-		}
-		if (timeout == EDID_WAIT_TIMEOUT)
-			pr_info(HW "ddc timeout\n");
-		hdmitx_wr_reg(HDMITX_DWC_IH_I2CM_STAT0, 1 << 1);
-		/* Read back 8 bytes */
-		for (i = 0; i < 8; i++) {
-			rx_edid[byte_num] =
-				hdmitx_rd_reg(HDMITX_DWC_I2CM_READ_BUFF0 + i);
-			if (byte_num == 126) {
-				blk_no = rx_edid[126] + 1;
-				if (blk_no > 4) {
-					pr_info(HW "edid extension block number:");
-					pr_info(HW " %d, reset to MAX 3\n",
-						blk_no - 1);
-					blk_no = 4; /* Max extended block */
-				}
-			}
-			byte_num++;
-		}
-	}
-} /* hdmi20_tx_read_edid */
-
 static int get_hdcp_depth(void)
 {
 	int ret;
diff --git a/drivers/amlogic/media/vout/vout_serve/vout_serve.c b/drivers/amlogic/media/vout/vout_serve/vout_serve.c
index a92781a17462..ac059747c378 100644
--- a/drivers/amlogic/media/vout/vout_serve/vout_serve.c
+++ b/drivers/amlogic/media/vout/vout_serve/vout_serve.c
@@ -907,6 +907,7 @@ static int refresh_tvout_mode(void)
 	char cur_mode_str[VMODE_NAME_LEN_MAX];
 	int hpd_state = 0;
 	struct vinfo_s *info = get_current_vinfo();
+	static int last_hpd_state;
 
 	if (tvout_monitor_flag == 0)
 		return 0;
@@ -914,6 +915,8 @@ static int refresh_tvout_mode(void)
        hpd_state = 1;
 
 	if (hpd_state) {
+		if (hpd_state == last_hpd_state)
+			return 0;
 		/* Vout will check the checksum of EDID of uboot and kernel.
 		 * If checksum is different. Vout will set null to display/mode.
 		 * When systemcontrol bootup, it will set the correct mode and
@@ -942,6 +945,7 @@ static int refresh_tvout_mode(void)
 
 	strncpy(vout_mode, cur_mode_str, VMODE_NAME_LEN_MAX);
 
+	last_hpd_state = hpd_state;
 	if (cur_vmode >= VMODE_MAX) {
 		VOUTERR("%s: no matched vmode: %s, force to set 1080p60hz\n",
 			__func__, cur_mode_str);
diff --git a/include/linux/amlogic/media/vout/hdmi_tx/hdmi_tx_ddc.h b/include/linux/amlogic/media/vout/hdmi_tx/hdmi_tx_ddc.h
index e0be30d48077..ab504b14bc39 100644
--- a/include/linux/amlogic/media/vout/hdmi_tx/hdmi_tx_ddc.h
+++ b/include/linux/amlogic/media/vout/hdmi_tx/hdmi_tx_ddc.h
@@ -87,5 +87,5 @@ uint32_t hdcp_rd_hdcp22_ver(void);
 void scdc_config(struct hdmitx_dev *hdev);
 void edid_read_head_8bytes(void);
 int scdc_status_flags(struct hdmitx_dev *hdev);
-
+void hdmitx_read_edid(unsigned char *rx_edid);
 #endif  /* __HDMI_TX_SCDC_H__ */
-- 
2.17.1

